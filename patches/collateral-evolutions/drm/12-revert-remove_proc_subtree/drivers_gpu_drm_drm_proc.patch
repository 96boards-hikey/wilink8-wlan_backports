--- a/drivers/gpu/drm/drm_proc.c
+++ b/drivers/gpu/drm/drm_proc.c
@@ -95,7 +95,7 @@ static int drm_proc_create_files(const s
 	struct drm_device *dev = minor->dev;
 	struct proc_dir_entry *ent;
 	struct drm_info_node *tmp;
-	int i;
+	int i, ret;
 
 	for (i = 0; i < count; i++) {
 		u32 features = files[i].driver_features;
@@ -105,9 +105,10 @@ static int drm_proc_create_files(const s
 			continue;
 
 		tmp = kmalloc(sizeof(struct drm_info_node), GFP_KERNEL);
-		if (!tmp)
-			return -1;
-
+		if (tmp == NULL) {
+			ret = -1;
+			goto fail;
+		}
 		tmp->minor = minor;
 		tmp->info_ent = &files[i];
 		list_add(&tmp->list, &minor->proc_nodes.list);
@@ -119,10 +120,16 @@ static int drm_proc_create_files(const s
 				  minor->index, files[i].name);
 			list_del(&tmp->list);
 			kfree(tmp);
-			return -1;
+			ret = -1;
+			goto fail;
 		}
 	}
 	return 0;
+
+fail:
+	for (i = 0; i < count; i++)
+		remove_proc_entry(drm_proc_list[i].name, minor->proc_root);
+	return ret;
 }
 
 /**
@@ -153,7 +160,7 @@ int drm_proc_init(struct drm_minor *mino
 	ret = drm_proc_create_files(drm_proc_list, DRM_PROC_ENTRIES,
 				    minor->proc_root, minor);
 	if (ret) {
-		remove_proc_subtree(name, root);
+		remove_proc_entry(name, root);
 		minor->proc_root = NULL;
 		DRM_ERROR("Failed to create core drm proc files\n");
 		return ret;
@@ -203,7 +210,8 @@ int drm_proc_cleanup(struct drm_minor *m
 	drm_proc_remove_files(drm_proc_list, DRM_PROC_ENTRIES, minor);
 
 	sprintf(name, "%d", minor->index);
-	remove_proc_subtree(name, root);
+	remove_proc_entry(name, root);
+
 	return 0;
 }
 
