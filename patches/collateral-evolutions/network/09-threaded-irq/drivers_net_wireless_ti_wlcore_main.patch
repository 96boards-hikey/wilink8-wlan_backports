--- a/drivers/net/wireless/ti/wlcore/main.c
+++ b/drivers/net/wireless/ti/wlcore/main.c
@@ -6088,8 +6088,15 @@ static void wlcore_nvs_cb(const struct f
 		irqflags = IRQF_TRIGGER_HIGH | IRQF_ONESHOT;
 	}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)
 	ret = request_threaded_irq(wl->irq, hardirq_fn, wlcore_irq,
 				   irqflags, pdev->name, wl);
+#else
+	ret = compat_request_threaded_irq(&wl->irq_compat, wl->irq,
+					  hardirq_fn, wlcore_irq,
+					  irqflags,
+					  pdev->name, wl);
+#endif
 	if (ret < 0) {
 		wl1271_error("request_irq() failed: %d", ret);
 		goto out_free_nvs;
@@ -6135,7 +6142,12 @@ out_unreg:
 	wl1271_unregister_hw(wl);
 
 out_irq:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)
 	free_irq(wl->irq, wl);
+#else
+	compat_free_threaded_irq(&wl->irq_compat);
+	compat_destroy_threaded_irq(&wl->irq_compat);
+#endif
 
 out_free_nvs:
 	kfree(wl->nvs);
@@ -6181,7 +6193,12 @@ int wlcore_remove(struct platform_device
 		disable_irq_wake(wl->irq);
 	}
 	wl1271_unregister_hw(wl);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)
 	free_irq(wl->irq, wl);
+#else
+	compat_free_threaded_irq(&wl->irq_compat);
+	compat_destroy_threaded_irq(&wl->irq_compat);
+#endif
 	wlcore_free_hw(wl);
 
 	return 0;
